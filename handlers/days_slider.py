from aiog import *
import asyncio
from handlers import user_mode
from init_client import *
import editabs
from simple_tg_md import convert_to_md2




def create_progress_bar_slider(current_days: int) -> InlineKeyboardMarkup:

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_length = 10
    filled_length = current_days

    progress_bar = ""
    for i in range(1, progress_length + 1):
        if i <= filled_length:
            progress_bar = "‚ñà" * current_days + "‚ñë" * (progress_length - current_days)

    # –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è

    header = f"üìÜ –î–Ω–∏: {current_days}/10"

    # –†—è–¥ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    progress_row = [InlineKeyboardButton(text=f"[{progress_bar}]", callback_data="progress_visual")]

    # –ö–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    control_row = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"progress_dec:{current_days}"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"progress_inc:{current_days}")
        ]

    # –ë—ã—Å—Ç—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    quick_row1 = [
        InlineKeyboardButton(text="1", callback_data="progress_set:1"),
        InlineKeyboardButton(text="3", callback_data="progress_set:3"),
        InlineKeyboardButton(text="5", callback_data="progress_set:5"),
        InlineKeyboardButton(text="7", callback_data="progress_set:7"),
        InlineKeyboardButton(text="10", callback_data="progress_set:10")
        ]

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=header, callback_data="progress_header")],
        progress_row,
        control_row
        ])

    return keyboard


@dp.callback_query(F.data == "mode_days")
async def cmd_progress_slider(callback: CallbackQuery):
    user_id = callback.from_user.id
    days = editabs.get_user_days(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î

    keyboard = create_progress_bar_slider(days)
    await callback.message.edit_text(convert_to_md2( "*–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π*\n\n"
        "_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–æ–≤_\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç 1 –¥–æ 10 –¥–Ω–µ–π:")
       ,
        parse_mode=aiogram.enums.ParseMode.MARKDOWN_V2,
        reply_markup=keyboard
        )
    await callback.answer()



@dp.callback_query(F.data.startswith("progress_inc:"))
async def process_progress_increase(callback: CallbackQuery):
    current_value = int(callback.data.split(":")[1])
    new_value = min(10, current_value + 1)
    user_id = callback.from_user.id

    editabs.save_user_days(user_id, new_value)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î

    keyboard = create_progress_bar_slider(new_value)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer(f"{new_value}")


@dp.callback_query(F.data.startswith("progress_dec:"))
async def process_progress_decrease(callback: CallbackQuery):
    current_value = int(callback.data.split(":")[1])
    new_value = max(1, current_value - 1)
    user_id = callback.from_user.id

    editabs.save_user_days(user_id, new_value)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î

    keyboard = create_progress_bar_slider(new_value)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer(f"{new_value}")



@dp.callback_query(F.data.startswith("progress_set:"))
async def process_progress_set(callback: CallbackQuery):
    new_value = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    editabs.save_user_days(user_id, new_value)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î

    keyboard = create_progress_bar_slider(new_value)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer(f"‚ö° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_value}")





@dp.callback_query(F.data.in_(["progress_header", "progress_visual", "progress_current"]))
async def process_info_buttons(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()


@dp.callback_query(F.data == "show_days")
async def cmd_show_days(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ days (–∏–∑ –ë–î)"""
    user_id = callback.from_user.id
    days = editabs.get_user_days(user_id)

    if isinstance(days, int):
        progress_bar = "‚ñà" * days + "‚ñë" * (10 - days)
        percentage = (days / 10) * 100

        await callback.message.answer(
            f"üìÖ –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ days: <b>{days}</b>\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: [{progress_bar}] {percentage:.0f}%",
            parse_mode="HTML"
        )
    else:
        await callback.message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
    await callback.answer()
