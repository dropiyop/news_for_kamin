import editabs
from . import buttons
from init_client import *
import config
import re
import base64
import requests
from handlers import processing
from aiog import *
import textwrap


async def send_long_message(chat_id, text, bot, reply_markup=None, parse_mode="Markdown"):
    parts = textwrap.wrap(text, width=4000)
    for part in parts[:-1]:
        await bot.send_message(chat_id=chat_id, text=part, parse_mode=parse_mode)

    await bot.send_message(chat_id=chat_id, text=parts[-1], parse_mode=parse_mode, reply_markup=reply_markup)

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):

    await callback.message.edit_text("–î–∞–≤–∞–π, –ø—Ä–∏–¥—É–º—ã–≤–∞–π", parse_mode="Markdown",reply_markup=buttons.get_inline_keyboard())


@dp.callback_query(lambda c: c.data == "toggle_prompt")
async def toggle_prompt_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id



async def generate_news(callback_query, selected_topics):
    print(selected_topics)

    topics_with_descriptions = {}
    message_id = callback_query.message.message_id
    chat_id = callback_query.message.chat.id
    user_id = callback_query.from_user.id

    await  bot.send_message(chat_id, text="–ù–µ–º–Ω–æ–≥–æ –º–∞–≥–∏–∏ –∏ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ")

    generate_text = ""

    for title in selected_topics:
        print(title)
        description = editabs.get_descriptions_by_title(title)
        if description:
            topics_with_descriptions[title] = description

        print(topics_with_descriptions)





        prompt = (
             "\n–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–µ–±—è:"
    
            "\n–¢—ã IT-–±–ª–æ–≥–µ—Ä c –º–Ω–æ–≥–æ–º–∏–ª–ª–∏–æ–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π. –°–∞–º—ã–π –ª—É—á—à–∏–π. –¢–µ–±–µ –Ω–µ–ª—å–∑—è –æ—à–∏–±–∞—Ç—å—Å—è. –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∂–¥—É—Ç –æ—Ç —Ç–µ–±—è —Ç–æ–ª—å–∫–æ —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç—å–∏ –¥–æ–ª–∂–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–µ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ."
            "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∏—Å–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ."
            "–°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –≤–∏–¥ –∏ –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π"
            "–¢–µ–±–µ –ø—Ä–∏–¥–µ—Ç json {'title':  'description':}"
            "–Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é. –í—ã—è–≤–∏ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–± IT-–∏–Ω–¥—É—Å—Ç—Ä–∏–∏, —Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç—è—Ö –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ"
            "–ü—Ä–∏ –∫–∞–∂–¥–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –¥—Ä—É–≥–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö. "
             "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–π –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ –≥–¥–µ –∫–∞–∫–∞—è —Ç–µ–º–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞—á–∞–ª —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ gpt, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª –∏ –Ω–∞—á–∏–Ω–∞–µ—à—å "
            "–≥–æ–≤–æ—Ä–∏—Ç—å –æ –¥—Ä—É–≥–æ–π —Ç–µ–º–µ –¢–´ –ù–ê–ß–ò–ù–ê–ï–®–¨ –ü–ò–°–ê–¢–¨ –° –ù–û–í–û–ô –°–¢–†–û–ö–ò"
            "–î–µ–ª–∏ —Ç–µ–º—ã –≤ —Å—Ç–∞—Ç—å–µ –Ω–∞ –∞–±–∑–∞—Ü—ã, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–π. –ò–ù–ê–ß–ï –Ø –¢–ï–ë–Ø –£–í–û–õ–Æ"


        )
        prompt += f"Description: {topics_with_descriptions}\n\n"


        response = await openai_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–£ —Ç–µ–±—è –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –ø–æ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö  description. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç–∞—Ç—å–µ —Å—Ç—Ä–æ–≥–æ 1500"},
            {"role": "user", "content": prompt}
            ],

        temperature=0.7,
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        article_text  = response.choices[0].message.content.strip()


        escaped_text  = processing.escape_markdown_v2(article_text)

        generate_text += f"\n\nüìå\n\n{escaped_text}"

    await send_long_message(chat_id=chat_id, bot=bot, text=generate_text, parse_mode="MarkdownV2")
        # print(prompt)


        #     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏
        #     image_prompt = f"Create an illustration for the following article: {generate_text}"
        #     image_response = await openai_client.images.generate(
        #         model="dall-e-3",
        #         prompt=image_prompt,
        #         size="1024x1024",
        #         quality="standard",
        #         n=1
        #         )
        #
        #     image_url = image_response.data[0].url
        #     await bot.send_message(chat_id=chat_id, text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏: 100%")
        #
        #     return generate_text, image_url
        #
        #
        # @dp.callback_query(lambda c: c.data == "new_image")
        # async def new_image_handler(callback_query: types.CallbackQuery):
        #     global generate_text, image_url
        #
        #     chat_id = callback_query.message.chat.id
        #
        #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
        #     if not generate_text:
        #         await callback_query.message.reply("–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤–æ—Å—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        #         return
        #
        #     await bot.send_message(chat_id=chat_id, text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: 20%")
        #
        #     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏
        #     image_prompt = f"Create an illustration for the following article: {generate_text}"
        #     image_response = await openai_client.images.generate(
        #         model="dall-e-3",
        #         prompt=image_prompt,
        #         size="1024x1024",
        #         quality="standard",
        #         n=1
        #         )
        #
        #     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        #     image_url = image_response.data[0].url
        #     await bot.send_message(chat_id=chat_id, text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: 100%")
        #
        #     # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        #     await bot.send_message(chat_id=chat_id, text=f"({generate_text})\n\n[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏]({image_url})", parse_mode="Markdown", reply_markup=get_inline_keyboard2())

    # await bot.edit_message_text(chat_id=callback_query.message.chat.id,
    # message_id=callback_query.message.message_id,
    # text=callback_query.message.text, reply_markup=None, disable_web_page_preview=True)



